{%- macro simple_type(t, optional) -%}
    {%- set ctype = t[t.kind].alias if optional or t.array else t[t.kind].ctype -%}
    {%- if optional -%}Optional{%- endif -%}{{ ctype }}{%- if t.array -%}s{%- endif -%}
{%- endmacro -%}
{% macro struct_type(t, optional) -%}
    struct {
        bool has_value;
        {% for prop in t.properties %}{{ property(prop) }} {% endfor -%}
    }
{%- endmacro -%}
{% macro variant_type(t, optional) -%}
    struct {
        bool has_value;
        int tag;
        union {
            {% for variant in t.options %}{{ type(variant) }} _{{ loop.index0 }}; {% endfor %}
        };
    }
{%- endmacro -%}
{% macro dunno_man(t) %} Dunno man {% endmacro -%}
{%- macro type(t, optional) -%}
    {%- if t.kind == "basic_type" or t.kind == "constant" or t.kind == "typeref" -%} {{ simple_type(t, optional) }}
    {%- elif t.kind is eq("struct") -%} {{ struct_type(t, optional) }}
    {%- elif t.kind is eq("variant") -%} {{ variant_type(t, optional) }}
    {%- else -%} {{ dunno_man(t, optional) }}
    {%- endif -%}
{% endmacro -%}
{%- macro property(p) -%}
    {{ type(p.type, p.optional) }} {{ p.name }};
{% endmacro -%}
{% macro include(i) %}#include <lsp/schema/{{ i }}.h>
{% endmacro -%}
/**
 * Copyright (c) 2024, Jan de Visser <jan@finiandarcy.com>
 *
 * SPDX-License-Identifier: MIT
 *
 * THIS IS GENERATED CODE. DO NOT MODIFY.
 */

#ifndef __LSP_{{ name|upper }}_H__
#define __LSP_{{ name|upper }}_H__

#include <lsp/schema/lsp_base.h>

{% for i in dependencies %}{{ include(i) }}{% endfor %}

typedef struct {
{% for p in interface.properties -%}{{ property(p) }}{%- endfor -%}
} {{ name }};

OPTIONAL({{ name }});
DA_WITH_NAME({{ name }}, {{ name }}s);
OPTIONAL({{ name }}s);

extern OptionalJSONValue {{name}}_encode({{name}} value);
extern Optional{{name}} {{name}}_decode(OptionalJSONValue json);
extern OptionalJSONValue {{name}}s_encode({{name}}s value);
extern Optional{{name}}s {{name}}s_decode(OptionalJSONValue json);

#endif /* __LSP_{{ name|upper }}_H__ */
